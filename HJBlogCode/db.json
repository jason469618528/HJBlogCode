{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/again/source/favicon.ico","path":"favicon.ico","modified":0,"renderable":1},{"_id":"themes/again/source/css/app.scss","path":"css/app.scss","modified":0,"renderable":1},{"_id":"themes/again/source/images/avatar.png","path":"images/avatar.png","modified":0,"renderable":1},{"_id":"themes/again/source/images/banner-small.png","path":"images/banner-small.png","modified":0,"renderable":1},{"_id":"themes/again/source/js/app.js","path":"js/app.js","modified":0,"renderable":1},{"_id":"themes/again/source/images/banner-large.png","path":"images/banner-large.png","modified":0,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1489723614000},{"_id":"themes/again/README.md","hash":"74eb9742c34d3630da066905bb955f249b9be1df","modified":1488440045000},{"_id":"themes/again/_config.yml","hash":"091e30c372a88ab34478bc93472537620a917297","modified":1488444016000},{"_id":"source/_images/.DS_Store","hash":"0c8db056f2f69870431fd926e04b92cb901b41f0","modified":1489723038000},{"_id":"source/_posts/.DS_Store","hash":"297b73cbd4c26a07e2e505f05afd05a947614160","modified":1489723614000},{"_id":"source/_posts/IOS 开发经验总结(不定时更新).md","hash":"93ecccdbe9c79f3ea0b7e194dd99679754c87c1d","modified":1489629554000},{"_id":"source/_posts/IOS面试题(初级).md","hash":"4bcc77446deb357ca50f41b9222777c00465a3e5","modified":1488506584000},{"_id":"source/_posts/Xcode 创建自定义模板 (网络).md","hash":"733645185917eabbb743f0d02debc8accb6531ae","modified":1489723663000},{"_id":"source/_posts/使用SourceTree&Github 碰到的问题.md","hash":"780061171c36526af5f085a96313ddac9ccf3235","modified":1488447870000},{"_id":"themes/again/.git/FETCH_HEAD","hash":"355d7f481d62838664ea6451059a66e267d31a3e","modified":1488447895000},{"_id":"themes/again/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1488440045000},{"_id":"themes/again/.git/config","hash":"08e0b6b92c013d0b238258d3c3087e767acade11","modified":1488440045000},{"_id":"themes/again/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1488440021000},{"_id":"themes/again/.git/index","hash":"bb0f0a2f18c298ce2daa57bc2b61af95e40dba33","modified":1488447918000},{"_id":"themes/again/.git/packed-refs","hash":"a49162f50f6f47707fd2ed4e99ec9bafee24dda7","modified":1488440045000},{"_id":"themes/again/layout/archive.ejs","hash":"1f8724a48ab2ef61182b8a930e3998f833eb1487","modified":1488440045000},{"_id":"themes/again/layout/index.ejs","hash":"b87edba726df46b991bcaa153c1a222080f991e9","modified":1488440045000},{"_id":"themes/again/layout/layout.ejs","hash":"bfe888472313a2edc8b7db3190b1802d580fc2bd","modified":1488440045000},{"_id":"themes/again/layout/page.ejs","hash":"b1c9235cd9ccff78c4dc15608a708e4a74433d46","modified":1488440045000},{"_id":"themes/again/layout/post.ejs","hash":"fa55c7bed8d3ac20e3911140d5252b9184ca3b14","modified":1488440045000},{"_id":"themes/again/source/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1488445031000},{"_id":"themes/again/source/favicon.ico","hash":"a802ff961c5055bb3e9c9c20cd99266eff681ccd","modified":1488444948000},{"_id":"source/_images/Xcode 创建自定义模板 (来源网络)/1693553-0bed79c964adb6dc.png","hash":"61048cbd4105d38d09fc92126cccde77feb76d0f","modified":1489722636000},{"_id":"source/_images/Xcode 创建自定义模板 (来源网络)/1693553-0ed0fdac87c08112.png","hash":"1f371f56e6b605b79d49fb96f6157716ebeb2e3f","modified":1489722821000},{"_id":"themes/again/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1488440021000},{"_id":"themes/again/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1488440021000},{"_id":"themes/again/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1488440021000},{"_id":"themes/again/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1488440021000},{"_id":"themes/again/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1488440021000},{"_id":"themes/again/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1488440021000},{"_id":"themes/again/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1488440021000},{"_id":"themes/again/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1488440021000},{"_id":"themes/again/.git/hooks/update.sample","hash":"39355a075977d05708ef74e1b66d09a36e486df1","modified":1488440021000},{"_id":"themes/again/.git/info/exclude","hash":"bb5a85730dcf100facee799c05cc4f6affec0745","modified":1488440021000},{"_id":"themes/again/.git/logs/HEAD","hash":"85b0439490488fd58ae90f46b051a3f356983726","modified":1488440045000},{"_id":"themes/again/layout/_partial/archive.ejs","hash":"6171678e54aec97bf3de20f2a0a81566b9e4ce3a","modified":1488447923000},{"_id":"themes/again/layout/_partial/article.ejs","hash":"76e490830f562699b4ddc01c6df6e7f89f0414e3","modified":1488447923000},{"_id":"themes/again/layout/_partial/footer.ejs","hash":"8b298f7a91ed927309e2436df3a291a87edaed67","modified":1488443981000},{"_id":"themes/again/layout/_partial/head.ejs","hash":"cecf7512f9c5a586058d18faf4b881169fc202cf","modified":1488440045000},{"_id":"themes/again/layout/_partial/header.ejs","hash":"219c66b37b46bad660099e1516dbb6dcbab0a992","modified":1488440045000},{"_id":"themes/again/layout/_partial/index.ejs","hash":"2d89dd44e2acfdda48c5ecabf06e25a9501c4be3","modified":1488447921000},{"_id":"themes/again/layout/_partial/nav.ejs","hash":"9145acd2c9f3fcb5d1ed3d63ad6ad4b8a075b734","modified":1488440045000},{"_id":"themes/again/layout/_widget/back-to-home.ejs","hash":"6d3544def976676e38e10134cae071f44bbf67d7","modified":1488440045000},{"_id":"themes/again/layout/_widget/disqus.ejs","hash":"47eb63418da61245bf674cb1764419c2741e486b","modified":1488440045000},{"_id":"themes/again/layout/_widget/paginator.ejs","hash":"ed04dbcb0cc79733ac338c3fc2a8604d41eb0848","modified":1488440045000},{"_id":"themes/again/layout/_widget/sharing.ejs","hash":"8d50310cae2bd6531a3ba04b5c5188c616035359","modified":1488440045000},{"_id":"themes/again/layout/_widget/twitter.ejs","hash":"49acef5c7713af0dc27f3aa78b80cb6379d18262","modified":1488444239000},{"_id":"themes/again/source/css/_base.scss","hash":"efeb11d16ab4cf79e67ffac179e41ddfba82aac0","modified":1488440045000},{"_id":"themes/again/source/css/_font.scss","hash":"3348cde2f82797bd92ab69405824f02472736698","modified":1488440045000},{"_id":"themes/again/source/css/_variables.scss","hash":"e649d7f3a0323d8742b9ef9fdd2b6cf458025bce","modified":1488447917000},{"_id":"themes/again/source/css/app.scss","hash":"7b466635119bfb88c54532f4f88b8f824b5a6666","modified":1488440045000},{"_id":"themes/again/source/images/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1488445007000},{"_id":"themes/again/source/images/avatar.png","hash":"a802ff961c5055bb3e9c9c20cd99266eff681ccd","modified":1488444948000},{"_id":"themes/again/source/images/banner-small.png","hash":"4b87b439bbf9507f7bed53d7c2c1a22e07a064e8","modified":1488440045000},{"_id":"themes/again/source/js/app.js","hash":"8e00097211a064209ae0e9fb556920673f5b9a42","modified":1488440045000},{"_id":"source/_images/Xcode 创建自定义模板 (来源网络)/1693553-98812f12b7414336.png","hash":"bce484757d70893de0eb65620cc5ae985ab84d81","modified":1489722708000},{"_id":"source/_images/Xcode 创建自定义模板 (来源网络)/1693553-d8e6c07058f379f0-1.png","hash":"33c3582f02ae35647f3de888734c7af914a6f731","modified":1489722838000},{"_id":"themes/again/.git/objects/pack/pack-acf3e222c7f329aad4bf622dfd6625ba37b8ccc5.idx","hash":"d796886dff9d5b6fd0e18df0840b7f2b03a25390","modified":1488440045000},{"_id":"themes/again/.git/refs/heads/master","hash":"874843a486edd0e72e1e7d7e09fc0c7cd8bca61b","modified":1488440045000},{"_id":"themes/again/source/css/_helper/grid.scss","hash":"d290e1315dc8dc3509e26fb5e4ff55eb277e6e84","modified":1488440045000},{"_id":"themes/again/source/css/_helper/index.scss","hash":"8c35cff7ea4785042f6116f28b09ea8ffc087255","modified":1488440045000},{"_id":"themes/again/source/css/_partial/archive.scss","hash":"b358e1a0e51ebea6ea5aee80447644baaa463723","modified":1488440045000},{"_id":"themes/again/source/css/_partial/article.scss","hash":"d61138a0f5e59204a4f37d34e4bdf48157e78bbe","modified":1488440045000},{"_id":"themes/again/source/css/_partial/footer.scss","hash":"f1ecaa07e5920eede1c2e0b7bfbfe1b3a8f8fb5c","modified":1488440045000},{"_id":"themes/again/source/css/_partial/header.scss","hash":"e0d092a98d2c9822a31a4b93c1e31fca5d68af21","modified":1488440045000},{"_id":"themes/again/source/css/_partial/index.scss","hash":"7498f3c447a5510891fb880d685a39f4791550f0","modified":1488440045000},{"_id":"themes/again/source/css/_partial/nav.scss","hash":"d66e6ae75faaa0bf77c481264e9109714007b1f8","modified":1488440045000},{"_id":"themes/again/source/css/_partial/page.scss","hash":"b576caf22a0d0b9b872ad54dbd0ab2c16a104b86","modified":1488440045000},{"_id":"themes/again/source/css/_partial/partials.scss","hash":"5fd002673fcd254a600b0d034c9eba03033715a4","modified":1488440045000},{"_id":"themes/again/source/css/_widget/back-to-home.scss","hash":"d60425bff8e9cbed9f0f0a9827cbc567f994fb14","modified":1488440045000},{"_id":"themes/again/source/css/_widget/highlight.scss","hash":"433e8a1c04b6e0fe5617cdadc2e12762c337d7f9","modified":1488440045000},{"_id":"themes/again/source/css/_widget/index.scss","hash":"5de4195cf47963fe68a15e16b7bb067970e0b83c","modified":1488440045000},{"_id":"themes/again/source/css/_widget/sharing.scss","hash":"38f54a9aa48654e4dad44535918550098aa913a6","modified":1488440045000},{"_id":"themes/again/source/images/banner-large.png","hash":"3e91a135ca4c446301995aedc998784e035d485a","modified":1488440045000},{"_id":"themes/again/.git/logs/refs/heads/master","hash":"85b0439490488fd58ae90f46b051a3f356983726","modified":1488440045000},{"_id":"themes/again/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1488440045000},{"_id":"themes/again/.git/logs/refs/remotes/origin/HEAD","hash":"85b0439490488fd58ae90f46b051a3f356983726","modified":1488440045000},{"_id":"themes/again/.git/objects/pack/pack-acf3e222c7f329aad4bf622dfd6625ba37b8ccc5.pack","hash":"4fa373fea519f20555fcb4eb57b2dc65e1f09a2d","modified":1488440045000},{"_id":"public/2017/03/16/IOS 开发经验总结(不定时更新)/index.html","hash":"5a999a94403e828c5d17f9d3b64637155e135bc5","modified":1489723380863},{"_id":"public/2017/03/03/IOS面试题(初级)/index.html","hash":"b2b21cf0dfd92e819df874b1140e5a97dc1f9162","modified":1489723380870},{"_id":"public/2017/03/02/使用SourceTree&Github 碰到的问题/index.html","hash":"3cdc28949dcb98fdf327e7503aca097cfaa1f327","modified":1489723380871},{"_id":"public/archives/index.html","hash":"efa8b901bba654dd0787a4ba49b7c16e10e07e8c","modified":1489723380871},{"_id":"public/archives/2017/index.html","hash":"efa8b901bba654dd0787a4ba49b7c16e10e07e8c","modified":1489723380871},{"_id":"public/archives/2017/03/index.html","hash":"efa8b901bba654dd0787a4ba49b7c16e10e07e8c","modified":1489723380871},{"_id":"public/index.html","hash":"842b1ac503e07592f5d9930b0ffc036c55b86183","modified":1489723380871},{"_id":"public/2017/03/17/Xcode 创建自定义模板 (网络)/index.html","hash":"63385329dfd8073ca3de130b8f82b4b40b3df24e","modified":1489723672880},{"_id":"public/favicon.ico","hash":"a802ff961c5055bb3e9c9c20cd99266eff681ccd","modified":1489723380880},{"_id":"public/images/avatar.png","hash":"a802ff961c5055bb3e9c9c20cd99266eff681ccd","modified":1489723380880},{"_id":"public/images/banner-small.png","hash":"4b87b439bbf9507f7bed53d7c2c1a22e07a064e8","modified":1489723380880},{"_id":"public/css/app.css","hash":"46fce06ef740d38f5cb20fb45f340ca365e13dca","modified":1489723380903},{"_id":"public/js/app.js","hash":"8e00097211a064209ae0e9fb556920673f5b9a42","modified":1489723380904},{"_id":"public/images/banner-large.png","hash":"3e91a135ca4c446301995aedc998784e035d485a","modified":1489723380904},{"_id":"source/_posts/_images/.DS_Store","hash":"0c8db056f2f69870431fd926e04b92cb901b41f0","modified":1489723038000},{"_id":"source/_posts/_images/Xcode 创建自定义模板 (来源网络)/1693553-0bed79c964adb6dc.png","hash":"61048cbd4105d38d09fc92126cccde77feb76d0f","modified":1489722636000},{"_id":"source/_posts/_images/Xcode 创建自定义模板 (来源网络)/1693553-0ed0fdac87c08112.png","hash":"1f371f56e6b605b79d49fb96f6157716ebeb2e3f","modified":1489722821000},{"_id":"source/_posts/_images/Xcode 创建自定义模板 (来源网络)/1693553-98812f12b7414336.png","hash":"bce484757d70893de0eb65620cc5ae985ab84d81","modified":1489722708000},{"_id":"source/_posts/_images/Xcode 创建自定义模板 (来源网络)/1693553-d8e6c07058f379f0-1.png","hash":"33c3582f02ae35647f3de888734c7af914a6f731","modified":1489722838000}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"IOS 开发经验总结(不定时更新)","date":"2017-03-16T02:00:00.000Z","_content":"\n## 使用Podfile管理Pods依赖库版本\n```\npod 'AFNetworking'      //不显式指定依赖库版本，表示每次都获取最新版本    \npod 'AFNetworking', '2.0'     //只使用2.0版本    \npod 'AFNetworking', '> 2.0'     //使用高于2.0的版本    \npod 'AFNetworking', '>= 2.0'     //使用大于或等于2.0的版本    \npod 'AFNetworking', '< 2.0'     //使用小于2.0的版本    \npod 'AFNetworking', '<= 2.0'     //使用小于或等于2.0的版本    \npod 'AFNetworking', '~> 0.1.2'     //使用大于等于0.1.2但小于0.2的版本    \npod 'AFNetworking', '~>0.1'     //使用大于等于0.1但小于1.0的版本    \npod 'AFNetworking', '~>0'     //高于0的版本，写这个限制和什么都不写是一个效果，都表示使用最新版本  \n```\n","source":"_posts/IOS 开发经验总结(不定时更新).md","raw":"---\ntitle: IOS 开发经验总结(不定时更新)\ndate: 2017-03-16 10:00:00\ntags:\n---\n\n## 使用Podfile管理Pods依赖库版本\n```\npod 'AFNetworking'      //不显式指定依赖库版本，表示每次都获取最新版本    \npod 'AFNetworking', '2.0'     //只使用2.0版本    \npod 'AFNetworking', '> 2.0'     //使用高于2.0的版本    \npod 'AFNetworking', '>= 2.0'     //使用大于或等于2.0的版本    \npod 'AFNetworking', '< 2.0'     //使用小于2.0的版本    \npod 'AFNetworking', '<= 2.0'     //使用小于或等于2.0的版本    \npod 'AFNetworking', '~> 0.1.2'     //使用大于等于0.1.2但小于0.2的版本    \npod 'AFNetworking', '~>0.1'     //使用大于等于0.1但小于1.0的版本    \npod 'AFNetworking', '~>0'     //高于0的版本，写这个限制和什么都不写是一个效果，都表示使用最新版本  \n```\n","slug":"IOS 开发经验总结(不定时更新)","published":1,"updated":"2017-03-16T01:59:14.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0dau52600009z4t0haw8zpp","content":"<h2 id=\"使用Podfile管理Pods依赖库版本\"><a href=\"#使用Podfile管理Pods依赖库版本\" class=\"headerlink\" title=\"使用Podfile管理Pods依赖库版本\"></a>使用Podfile管理Pods依赖库版本</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">pod &apos;AFNetworking&apos;      //不显式指定依赖库版本，表示每次都获取最新版本    </div><div class=\"line\">pod &apos;AFNetworking&apos;, &apos;2.0&apos;     //只使用2.0版本    </div><div class=\"line\">pod &apos;AFNetworking&apos;, &apos;&gt; 2.0&apos;     //使用高于2.0的版本    </div><div class=\"line\">pod &apos;AFNetworking&apos;, &apos;&gt;= 2.0&apos;     //使用大于或等于2.0的版本    </div><div class=\"line\">pod &apos;AFNetworking&apos;, &apos;&lt; 2.0&apos;     //使用小于2.0的版本    </div><div class=\"line\">pod &apos;AFNetworking&apos;, &apos;&lt;= 2.0&apos;     //使用小于或等于2.0的版本    </div><div class=\"line\">pod &apos;AFNetworking&apos;, &apos;~&gt; 0.1.2&apos;     //使用大于等于0.1.2但小于0.2的版本    </div><div class=\"line\">pod &apos;AFNetworking&apos;, &apos;~&gt;0.1&apos;     //使用大于等于0.1但小于1.0的版本    </div><div class=\"line\">pod &apos;AFNetworking&apos;, &apos;~&gt;0&apos;     //高于0的版本，写这个限制和什么都不写是一个效果，都表示使用最新版本</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<h2 id=\"使用Podfile管理Pods依赖库版本\"><a href=\"#使用Podfile管理Pods依赖库版本\" class=\"headerlink\" title=\"使用Podfile管理Pods依赖库版本\"></a>使用Podfile管理Pods依赖库版本</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">pod &apos;AFNetworking&apos;      //不显式指定依赖库版本，表示每次都获取最新版本    </div><div class=\"line\">pod &apos;AFNetworking&apos;, &apos;2.0&apos;     //只使用2.0版本    </div><div class=\"line\">pod &apos;AFNetworking&apos;, &apos;&gt; 2.0&apos;     //使用高于2.0的版本    </div><div class=\"line\">pod &apos;AFNetworking&apos;, &apos;&gt;= 2.0&apos;     //使用大于或等于2.0的版本    </div><div class=\"line\">pod &apos;AFNetworking&apos;, &apos;&lt; 2.0&apos;     //使用小于2.0的版本    </div><div class=\"line\">pod &apos;AFNetworking&apos;, &apos;&lt;= 2.0&apos;     //使用小于或等于2.0的版本    </div><div class=\"line\">pod &apos;AFNetworking&apos;, &apos;~&gt; 0.1.2&apos;     //使用大于等于0.1.2但小于0.2的版本    </div><div class=\"line\">pod &apos;AFNetworking&apos;, &apos;~&gt;0.1&apos;     //使用大于等于0.1但小于1.0的版本    </div><div class=\"line\">pod &apos;AFNetworking&apos;, &apos;~&gt;0&apos;     //高于0的版本，写这个限制和什么都不写是一个效果，都表示使用最新版本</div></pre></td></tr></table></figure>\n"},{"title":"IOS面试题(初级)","date":"2017-03-03T06:40:15.000Z","_content":"**近日身边的朋友都在找工作，于是我在网上找了一些面试题目。(题目来源于网络)**\n1. Object-c的类可以多重继承么?可以实现多个接口么?Category是什么?重写一个类的方式用继承好还是分类好?为什么?\n2.  #import 跟#include 又什么区别，@class呢, #import<> 跟 #import””又什么区别?\n3. 属性readwrite，readonly，assign，retain，copy，nonatomic 各是什么作用，在那种情况下用?\n4. 写一个setter方法用于完成@property (nonatomic,retain)NSString *name,写一个setter方法用于完成@property(nonatomic，copy)NSString *name\n5. 对于语句NSString*obj = [[NSData alloc] init]; obj在编译时和运行时分别时什么类型的对象?\n6. 常见的object-c的数据类型有那些， 和C的基本数据类型有什么区别?如：NSInteger和int\n7. id 声明的对象有什么特性?\n8. Objective-C如何对内存管理的,说说你的看法和解决方法?\n9. 内存管理的几条原则时什么?按照默认法则.那些关键字生成的对象需要手动释放?在和property结合的时候怎样有效的避免内存泄露?\n10. 如何对iOS设备进行性能测试?\n11. Object C中创建线程的方法是什么?如果在主线程中执行代码，方法是什么?如果想延时执行代码、方法又是什么?\n12. MVC设计模式是什么？ 你还熟悉什么设计模式？\n13. 浅复制和深复制的区别?\n14. 类别的作用?继承和类别在实现中有何区别?\n15. 类别和类扩展的区别。\n16. 什么是KVO和KVC?\n17. 代理的作用?\n18. oc中可修改和不可以修改类型。\n19. 我们说的oc是动态运行时语言是什么意思?\n20. 通知和协议的不同之处?\n21. 什么是推送消息?\n22. 关于多态性\n23. 对于单例的理解\n24. frame和bounds有什么不同?\n25. 方法和选择器有何不同?\n26. OC的垃圾回收机制?\n27. NSOperation queue?\n28. 什么是延迟加载?\n29. 在iPhone应用中如何保存数据?\n30. 什么是谓词?\n31. iOS 中的多线程\n32. 谈谈Object-C的内存管理方式及过程？\n33. Object-C有多继承吗？没有的话用什么代替？cocoa 中所有的类都是NSObject 的子类\n\n\n\n","source":"_posts/IOS面试题(初级).md","raw":"---\ntitle: IOS面试题(初级)\ndate: 2017-03-03 14:40:15\ntags:\n---\n**近日身边的朋友都在找工作，于是我在网上找了一些面试题目。(题目来源于网络)**\n1. Object-c的类可以多重继承么?可以实现多个接口么?Category是什么?重写一个类的方式用继承好还是分类好?为什么?\n2.  #import 跟#include 又什么区别，@class呢, #import<> 跟 #import””又什么区别?\n3. 属性readwrite，readonly，assign，retain，copy，nonatomic 各是什么作用，在那种情况下用?\n4. 写一个setter方法用于完成@property (nonatomic,retain)NSString *name,写一个setter方法用于完成@property(nonatomic，copy)NSString *name\n5. 对于语句NSString*obj = [[NSData alloc] init]; obj在编译时和运行时分别时什么类型的对象?\n6. 常见的object-c的数据类型有那些， 和C的基本数据类型有什么区别?如：NSInteger和int\n7. id 声明的对象有什么特性?\n8. Objective-C如何对内存管理的,说说你的看法和解决方法?\n9. 内存管理的几条原则时什么?按照默认法则.那些关键字生成的对象需要手动释放?在和property结合的时候怎样有效的避免内存泄露?\n10. 如何对iOS设备进行性能测试?\n11. Object C中创建线程的方法是什么?如果在主线程中执行代码，方法是什么?如果想延时执行代码、方法又是什么?\n12. MVC设计模式是什么？ 你还熟悉什么设计模式？\n13. 浅复制和深复制的区别?\n14. 类别的作用?继承和类别在实现中有何区别?\n15. 类别和类扩展的区别。\n16. 什么是KVO和KVC?\n17. 代理的作用?\n18. oc中可修改和不可以修改类型。\n19. 我们说的oc是动态运行时语言是什么意思?\n20. 通知和协议的不同之处?\n21. 什么是推送消息?\n22. 关于多态性\n23. 对于单例的理解\n24. frame和bounds有什么不同?\n25. 方法和选择器有何不同?\n26. OC的垃圾回收机制?\n27. NSOperation queue?\n28. 什么是延迟加载?\n29. 在iPhone应用中如何保存数据?\n30. 什么是谓词?\n31. iOS 中的多线程\n32. 谈谈Object-C的内存管理方式及过程？\n33. Object-C有多继承吗？没有的话用什么代替？cocoa 中所有的类都是NSObject 的子类\n\n\n\n","slug":"IOS面试题(初级)","published":1,"updated":"2017-03-03T02:03:04.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0dau52d00019z4te51kzu0n","content":"<p><strong>近日身边的朋友都在找工作，于是我在网上找了一些面试题目。(题目来源于网络)</strong></p>\n<ol>\n<li>Object-c的类可以多重继承么?可以实现多个接口么?Category是什么?重写一个类的方式用继承好还是分类好?为什么?</li>\n<li>#import 跟#include 又什么区别，@class呢, #import&lt;&gt; 跟 #import””又什么区别?</li>\n<li>属性readwrite，readonly，assign，retain，copy，nonatomic 各是什么作用，在那种情况下用?</li>\n<li>写一个setter方法用于完成@property (nonatomic,retain)NSString <em>name,写一个setter方法用于完成@property(nonatomic，copy)NSString </em>name</li>\n<li>对于语句NSString*obj = [[NSData alloc] init]; obj在编译时和运行时分别时什么类型的对象?</li>\n<li>常见的object-c的数据类型有那些， 和C的基本数据类型有什么区别?如：NSInteger和int</li>\n<li>id 声明的对象有什么特性?</li>\n<li>Objective-C如何对内存管理的,说说你的看法和解决方法?</li>\n<li>内存管理的几条原则时什么?按照默认法则.那些关键字生成的对象需要手动释放?在和property结合的时候怎样有效的避免内存泄露?</li>\n<li>如何对iOS设备进行性能测试?</li>\n<li>Object C中创建线程的方法是什么?如果在主线程中执行代码，方法是什么?如果想延时执行代码、方法又是什么?</li>\n<li>MVC设计模式是什么？ 你还熟悉什么设计模式？</li>\n<li>浅复制和深复制的区别?</li>\n<li>类别的作用?继承和类别在实现中有何区别?</li>\n<li>类别和类扩展的区别。</li>\n<li>什么是KVO和KVC?</li>\n<li>代理的作用?</li>\n<li>oc中可修改和不可以修改类型。</li>\n<li>我们说的oc是动态运行时语言是什么意思?</li>\n<li>通知和协议的不同之处?</li>\n<li>什么是推送消息?</li>\n<li>关于多态性</li>\n<li>对于单例的理解</li>\n<li>frame和bounds有什么不同?</li>\n<li>方法和选择器有何不同?</li>\n<li>OC的垃圾回收机制?</li>\n<li>NSOperation queue?</li>\n<li>什么是延迟加载?</li>\n<li>在iPhone应用中如何保存数据?</li>\n<li>什么是谓词?</li>\n<li>iOS 中的多线程</li>\n<li>谈谈Object-C的内存管理方式及过程？</li>\n<li>Object-C有多继承吗？没有的话用什么代替？cocoa 中所有的类都是NSObject 的子类</li>\n</ol>\n","excerpt":"","more":"<p><strong>近日身边的朋友都在找工作，于是我在网上找了一些面试题目。(题目来源于网络)</strong></p>\n<ol>\n<li>Object-c的类可以多重继承么?可以实现多个接口么?Category是什么?重写一个类的方式用继承好还是分类好?为什么?</li>\n<li>#import 跟#include 又什么区别，@class呢, #import&lt;&gt; 跟 #import””又什么区别?</li>\n<li>属性readwrite，readonly，assign，retain，copy，nonatomic 各是什么作用，在那种情况下用?</li>\n<li>写一个setter方法用于完成@property (nonatomic,retain)NSString <em>name,写一个setter方法用于完成@property(nonatomic，copy)NSString </em>name</li>\n<li>对于语句NSString*obj = [[NSData alloc] init]; obj在编译时和运行时分别时什么类型的对象?</li>\n<li>常见的object-c的数据类型有那些， 和C的基本数据类型有什么区别?如：NSInteger和int</li>\n<li>id 声明的对象有什么特性?</li>\n<li>Objective-C如何对内存管理的,说说你的看法和解决方法?</li>\n<li>内存管理的几条原则时什么?按照默认法则.那些关键字生成的对象需要手动释放?在和property结合的时候怎样有效的避免内存泄露?</li>\n<li>如何对iOS设备进行性能测试?</li>\n<li>Object C中创建线程的方法是什么?如果在主线程中执行代码，方法是什么?如果想延时执行代码、方法又是什么?</li>\n<li>MVC设计模式是什么？ 你还熟悉什么设计模式？</li>\n<li>浅复制和深复制的区别?</li>\n<li>类别的作用?继承和类别在实现中有何区别?</li>\n<li>类别和类扩展的区别。</li>\n<li>什么是KVO和KVC?</li>\n<li>代理的作用?</li>\n<li>oc中可修改和不可以修改类型。</li>\n<li>我们说的oc是动态运行时语言是什么意思?</li>\n<li>通知和协议的不同之处?</li>\n<li>什么是推送消息?</li>\n<li>关于多态性</li>\n<li>对于单例的理解</li>\n<li>frame和bounds有什么不同?</li>\n<li>方法和选择器有何不同?</li>\n<li>OC的垃圾回收机制?</li>\n<li>NSOperation queue?</li>\n<li>什么是延迟加载?</li>\n<li>在iPhone应用中如何保存数据?</li>\n<li>什么是谓词?</li>\n<li>iOS 中的多线程</li>\n<li>谈谈Object-C的内存管理方式及过程？</li>\n<li>Object-C有多继承吗？没有的话用什么代替？cocoa 中所有的类都是NSObject 的子类</li>\n</ol>\n"},{"title":"Xcode 创建自定义模板 (来源网络)","date":"2017-03-17T04:00:00.000Z","_content":"\n### 1 模板方案路径\n系统模板的路径（Xcode7）_Applications_Xcode.app_Contents_Developer_Library_Xcode_Templates_File Templates在这个目录下；\n![](_images/Xcode 创建自定义模板 (来源网络)/1693553-98812f12b7414336.png)\n其中的Core Data、Other、Resource、Source和User Interface对应着\n![](_images/Xcode 创建自定义模板 (来源网络)/1693553-0bed79c964adb6dc.png)\n### BaseVC.xctemplate介绍\n\n假设已经将BaseVC.xctemplate放入了Source文件夹中，查看BaseVC.xctemplate中有\n（1）BaseViewControllerObjective-C 文件夹\n用来创建.h 和 .m文件。 其中文件夹的命名规范是[name]+Objective-C. 如果是创建swift修改为swift。\n（2）BaseViewControllerXibObjective-C文件夹\n用来创建.h，.m和.xib文件。其中文件夹的命名规范是[name]+XibObjective-C. swift类似。\n（3）TemplateIcon图片\n图片是用来显示在New File的菜单上的。任意放一个自己喜欢的图片，像素138*138即可。\n（4）TemplateInfo.plist\n配置文件。下面单独讲讲。\n\n###  3.___FILEBASENAME___.h\n内容为\n\n\n  ___FILENAME___\n  ___PROJECTNAME___\n\n  Created by ___FULLUSERNAME___ on ___DATE___.\n___COPYRIGHT___\n\n\n#import \"___VARIABLE_cocoaTouchSubclass___.h\"\n\n@interface ___FILEBASENAMEASIDENTIFIER___ : ___VARIABLE_cocoaTouchSubclass___\n\n@end\n里面的参数在生成h文件时，系统会替换了输入的文件名。具体都是什么含义，大家可以自行Google了。\n\n### 4. ___FILEBASENAME___.m\n\n内容为\n\n\n  ___FILENAME___\n  ___PROJECTNAME___\n\n  Created by ___FULLUSERNAME___ on ___DATE___.\n___COPYRIGHT___\n\n#import \"___FILEBASENAME___.h\"\n Controllers\n Model\n Views\n\n#define <#macro#> <#value#>\n\n\n@interface ___FILEBASENAMEASIDENTIFIER___ ()\n\n@property (nonatomic, strong) <#type#> *<#name#>\n@end\n@implementation ___FILEBASENAMEASIDENTIFIER___\n\n#pragma mark - View Controller LifeCyle\n\n- [ ] (instancetype)initWithCoder:(NSCoder *)coder\n{\n    self = [super initWithCoder:coder];\n    if (self) {\n    }\n    return self;\n}   \n- [ ] (void)viewDidLoad\n{\n    [super viewDidLoad];\n\n    [self initialNavigationBar];\n}\n- [ ] (void)viewDidAppear:(BOOL)animated\n{\n    [super viewDidAppear:animated];\n}\n- [ ] (void)viewWillDisappear:(BOOL)animated\n{\n    [super viewWillDisappear:animated];\n}\n\n- [ ] (void)didReceiveMemoryWarning\n{\n    [super didReceiveMemoryWarning];\n\n    [[SDImageCache sharedImageCache] setValue:nil forKey:@\"memCache\"];\n}\n\n- [ ] (void)dealloc\n{\n    [[NSNotificationCenter defaultCenter] removeObserver:self];\n}\n#pragma mark - Override\n\n#pragma mark - Initial Methods\n\n- [ ] (void)initialNavigationBar\n{\n    self.navigationItem.title = <#title#>;\n}\n\n#pragma mark - Target Methods\n\n#pragma mark - Notification Methods\n\n#pragma mark - KVO Methods\n\n#pragma mark - UITableViewDelegate, UITableViewDataSource\n\n#pragma mark - Privater Methods\n\n#pragma mark - Setter Getter Methods\n\n@end\n按编程规范编写的，大家可以自行修改，New File后将自动生成你修改的内容。\n### 5. TemplateInfo.plist\n![](_images/Xcode 创建自定义模板 (来源网络)/1693553-0ed0fdac87c08112.png)\nSortOrder 这个是排序的值，可以设置在界面中的摆放位置\nOptions中的Item0，Item1，Item2，Item3 对应了\n![](_images/Xcode 创建自定义模板 (来源网络)/1693553-d8e6c07058f379f0-1.png)\n自定义的BaseViewController的类，当然可以使用系统或自己定义。\nBaseViewController的后缀。选择后，自动在Class后面添加ViewController的后缀。\n是否生成Xib文件，默认是ture。当选择了BaseViewController时，可以进行checkout，不然不可选，不生成Xib文件。\n","source":"_posts/Xcode 创建自定义模板 (网络).md","raw":"\n---\ntitle: Xcode 创建自定义模板 (来源网络)\ndate: 2017-03-17 12:00:00\ntags:\n---\n\n### 1 模板方案路径\n系统模板的路径（Xcode7）_Applications_Xcode.app_Contents_Developer_Library_Xcode_Templates_File Templates在这个目录下；\n![](_images/Xcode 创建自定义模板 (来源网络)/1693553-98812f12b7414336.png)\n其中的Core Data、Other、Resource、Source和User Interface对应着\n![](_images/Xcode 创建自定义模板 (来源网络)/1693553-0bed79c964adb6dc.png)\n### BaseVC.xctemplate介绍\n\n假设已经将BaseVC.xctemplate放入了Source文件夹中，查看BaseVC.xctemplate中有\n（1）BaseViewControllerObjective-C 文件夹\n用来创建.h 和 .m文件。 其中文件夹的命名规范是[name]+Objective-C. 如果是创建swift修改为swift。\n（2）BaseViewControllerXibObjective-C文件夹\n用来创建.h，.m和.xib文件。其中文件夹的命名规范是[name]+XibObjective-C. swift类似。\n（3）TemplateIcon图片\n图片是用来显示在New File的菜单上的。任意放一个自己喜欢的图片，像素138*138即可。\n（4）TemplateInfo.plist\n配置文件。下面单独讲讲。\n\n###  3.___FILEBASENAME___.h\n内容为\n\n\n  ___FILENAME___\n  ___PROJECTNAME___\n\n  Created by ___FULLUSERNAME___ on ___DATE___.\n___COPYRIGHT___\n\n\n#import \"___VARIABLE_cocoaTouchSubclass___.h\"\n\n@interface ___FILEBASENAMEASIDENTIFIER___ : ___VARIABLE_cocoaTouchSubclass___\n\n@end\n里面的参数在生成h文件时，系统会替换了输入的文件名。具体都是什么含义，大家可以自行Google了。\n\n### 4. ___FILEBASENAME___.m\n\n内容为\n\n\n  ___FILENAME___\n  ___PROJECTNAME___\n\n  Created by ___FULLUSERNAME___ on ___DATE___.\n___COPYRIGHT___\n\n#import \"___FILEBASENAME___.h\"\n Controllers\n Model\n Views\n\n#define <#macro#> <#value#>\n\n\n@interface ___FILEBASENAMEASIDENTIFIER___ ()\n\n@property (nonatomic, strong) <#type#> *<#name#>\n@end\n@implementation ___FILEBASENAMEASIDENTIFIER___\n\n#pragma mark - View Controller LifeCyle\n\n- [ ] (instancetype)initWithCoder:(NSCoder *)coder\n{\n    self = [super initWithCoder:coder];\n    if (self) {\n    }\n    return self;\n}   \n- [ ] (void)viewDidLoad\n{\n    [super viewDidLoad];\n\n    [self initialNavigationBar];\n}\n- [ ] (void)viewDidAppear:(BOOL)animated\n{\n    [super viewDidAppear:animated];\n}\n- [ ] (void)viewWillDisappear:(BOOL)animated\n{\n    [super viewWillDisappear:animated];\n}\n\n- [ ] (void)didReceiveMemoryWarning\n{\n    [super didReceiveMemoryWarning];\n\n    [[SDImageCache sharedImageCache] setValue:nil forKey:@\"memCache\"];\n}\n\n- [ ] (void)dealloc\n{\n    [[NSNotificationCenter defaultCenter] removeObserver:self];\n}\n#pragma mark - Override\n\n#pragma mark - Initial Methods\n\n- [ ] (void)initialNavigationBar\n{\n    self.navigationItem.title = <#title#>;\n}\n\n#pragma mark - Target Methods\n\n#pragma mark - Notification Methods\n\n#pragma mark - KVO Methods\n\n#pragma mark - UITableViewDelegate, UITableViewDataSource\n\n#pragma mark - Privater Methods\n\n#pragma mark - Setter Getter Methods\n\n@end\n按编程规范编写的，大家可以自行修改，New File后将自动生成你修改的内容。\n### 5. TemplateInfo.plist\n![](_images/Xcode 创建自定义模板 (来源网络)/1693553-0ed0fdac87c08112.png)\nSortOrder 这个是排序的值，可以设置在界面中的摆放位置\nOptions中的Item0，Item1，Item2，Item3 对应了\n![](_images/Xcode 创建自定义模板 (来源网络)/1693553-d8e6c07058f379f0-1.png)\n自定义的BaseViewController的类，当然可以使用系统或自己定义。\nBaseViewController的后缀。选择后，自动在Class后面添加ViewController的后缀。\n是否生成Xib文件，默认是ture。当选择了BaseViewController时，可以进行checkout，不然不可选，不生成Xib文件。\n","slug":"Xcode 创建自定义模板 (网络)","published":1,"updated":"2017-03-17T04:07:43.000Z","_id":"cj0dau52g00029z4tpnnpcjek","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"1-模板方案路径\"><a href=\"#1-模板方案路径\" class=\"headerlink\" title=\"1 模板方案路径\"></a>1 模板方案路径</h3><p>系统模板的路径（Xcode7）_Applications_Xcode.app_Contents_Developer_Library_Xcode_Templates_File Templates在这个目录下；<br><img src=\"_images/Xcode 创建自定义模板 (来源网络\" alt=\"\">/1693553-98812f12b7414336.png)<br>其中的Core Data、Other、Resource、Source和User Interface对应着<br><img src=\"_images/Xcode 创建自定义模板 (来源网络\" alt=\"\">/1693553-0bed79c964adb6dc.png)</p>\n<h3 id=\"BaseVC-xctemplate介绍\"><a href=\"#BaseVC-xctemplate介绍\" class=\"headerlink\" title=\"BaseVC.xctemplate介绍\"></a>BaseVC.xctemplate介绍</h3><p>假设已经将BaseVC.xctemplate放入了Source文件夹中，查看BaseVC.xctemplate中有<br>（1）BaseViewControllerObjective-C 文件夹<br>用来创建.h 和 .m文件。 其中文件夹的命名规范是[name]+Objective-C. 如果是创建swift修改为swift。<br>（2）BaseViewControllerXibObjective-C文件夹<br>用来创建.h，.m和.xib文件。其中文件夹的命名规范是[name]+XibObjective-C. swift类似。<br>（3）TemplateIcon图片<br>图片是用来显示在New File的菜单上的。任意放一个自己喜欢的图片，像素138*138即可。<br>（4）TemplateInfo.plist<br>配置文件。下面单独讲讲。</p>\n<h3 id=\"3-FILEBASENAME-h\"><a href=\"#3-FILEBASENAME-h\" class=\"headerlink\" title=\"3.FILEBASENAME.h\"></a>3.<strong><em>FILEBASENAME</em></strong>.h</h3><p>内容为</p>\n<p>  <strong><em>FILENAME</em></strong><br>  <strong><em>PROJECTNAME</em></strong></p>\n<p>  Created by <strong><em>FULLUSERNAME</em></strong> on <strong><em>DATE</em></strong>.<br><strong><em>COPYRIGHT</em></strong></p>\n<p>#import “<strong>_VARIABLE<em>cocoaTouchSubclass</em></strong>.h”</p>\n<p>@interface <strong><em>FILEBASENAMEASIDENTIFIER</em></strong> : <strong>_VARIABLE<em>cocoaTouchSubclass</em></strong></p>\n<p>@end<br>里面的参数在生成h文件时，系统会替换了输入的文件名。具体都是什么含义，大家可以自行Google了。</p>\n<h3 id=\"4-FILEBASENAME-m\"><a href=\"#4-FILEBASENAME-m\" class=\"headerlink\" title=\"4. FILEBASENAME.m\"></a>4. <strong><em>FILEBASENAME</em></strong>.m</h3><p>内容为</p>\n<p>  <strong><em>FILENAME</em></strong><br>  <strong><em>PROJECTNAME</em></strong></p>\n<p>  Created by <strong><em>FULLUSERNAME</em></strong> on <strong><em>DATE</em></strong>.<br><strong><em>COPYRIGHT</em></strong></p>\n<p>#import “<strong><em>FILEBASENAME</em></strong>.h”<br> Controllers<br> Model<br> Views</p>\n<p>#define &lt;#macro#&gt; &lt;#value#&gt;</p>\n<p>@interface <strong><em>FILEBASENAMEASIDENTIFIER</em></strong> ()</p>\n<p>@property (nonatomic, strong) &lt;#type#&gt; *&lt;#name#&gt;<br>@end<br>@implementation <strong><em>FILEBASENAMEASIDENTIFIER</em></strong></p>\n<p>#pragma mark - View Controller LifeCyle</p>\n<ul>\n<li>[ ] (instancetype)initWithCoder:(NSCoder *)coder<br>{<br>  self = [super initWithCoder:coder];<br>  if (self) {<br>  }<br>  return self;<br>}   </li>\n<li><p>[ ] (void)viewDidLoad<br>{<br>  [super viewDidLoad];</p>\n<p>  [self initialNavigationBar];<br>}</p>\n</li>\n<li>[ ] (void)viewDidAppear:(BOOL)animated<br>{<br>  [super viewDidAppear:animated];<br>}</li>\n<li><p>[ ] (void)viewWillDisappear:(BOOL)animated<br>{<br>  [super viewWillDisappear:animated];<br>}</p>\n</li>\n<li><p>[ ] (void)didReceiveMemoryWarning<br>{<br>  [super didReceiveMemoryWarning];</p>\n<p>  [[SDImageCache sharedImageCache] setValue:nil forKey:@”memCache”];<br>}</p>\n</li>\n<li><p>[ ] (void)dealloc<br>{<br>  [[NSNotificationCenter defaultCenter] removeObserver:self];<br>}<br>#pragma mark - Override</p>\n</li>\n</ul>\n<p>#pragma mark - Initial Methods</p>\n<ul>\n<li>[ ] (void)initialNavigationBar<br>{<br>  self.navigationItem.title = &lt;#title#&gt;;<br>}</li>\n</ul>\n<p>#pragma mark - Target Methods</p>\n<p>#pragma mark - Notification Methods</p>\n<p>#pragma mark - KVO Methods</p>\n<p>#pragma mark - UITableViewDelegate, UITableViewDataSource</p>\n<p>#pragma mark - Privater Methods</p>\n<p>#pragma mark - Setter Getter Methods</p>\n<p>@end<br>按编程规范编写的，大家可以自行修改，New File后将自动生成你修改的内容。</p>\n<h3 id=\"5-TemplateInfo-plist\"><a href=\"#5-TemplateInfo-plist\" class=\"headerlink\" title=\"5. TemplateInfo.plist\"></a>5. TemplateInfo.plist</h3><p><img src=\"_images/Xcode 创建自定义模板 (来源网络\" alt=\"\">/1693553-0ed0fdac87c08112.png)<br>SortOrder 这个是排序的值，可以设置在界面中的摆放位置<br>Options中的Item0，Item1，Item2，Item3 对应了<br><img src=\"_images/Xcode 创建自定义模板 (来源网络\" alt=\"\">/1693553-d8e6c07058f379f0-1.png)<br>自定义的BaseViewController的类，当然可以使用系统或自己定义。<br>BaseViewController的后缀。选择后，自动在Class后面添加ViewController的后缀。<br>是否生成Xib文件，默认是ture。当选择了BaseViewController时，可以进行checkout，不然不可选，不生成Xib文件。</p>\n","excerpt":"","more":"<h3 id=\"1-模板方案路径\"><a href=\"#1-模板方案路径\" class=\"headerlink\" title=\"1 模板方案路径\"></a>1 模板方案路径</h3><p>系统模板的路径（Xcode7）_Applications_Xcode.app_Contents_Developer_Library_Xcode_Templates_File Templates在这个目录下；<br><img src=\"_images/Xcode 创建自定义模板 (来源网络\" alt=\"\">/1693553-98812f12b7414336.png)<br>其中的Core Data、Other、Resource、Source和User Interface对应着<br><img src=\"_images/Xcode 创建自定义模板 (来源网络\" alt=\"\">/1693553-0bed79c964adb6dc.png)</p>\n<h3 id=\"BaseVC-xctemplate介绍\"><a href=\"#BaseVC-xctemplate介绍\" class=\"headerlink\" title=\"BaseVC.xctemplate介绍\"></a>BaseVC.xctemplate介绍</h3><p>假设已经将BaseVC.xctemplate放入了Source文件夹中，查看BaseVC.xctemplate中有<br>（1）BaseViewControllerObjective-C 文件夹<br>用来创建.h 和 .m文件。 其中文件夹的命名规范是[name]+Objective-C. 如果是创建swift修改为swift。<br>（2）BaseViewControllerXibObjective-C文件夹<br>用来创建.h，.m和.xib文件。其中文件夹的命名规范是[name]+XibObjective-C. swift类似。<br>（3）TemplateIcon图片<br>图片是用来显示在New File的菜单上的。任意放一个自己喜欢的图片，像素138*138即可。<br>（4）TemplateInfo.plist<br>配置文件。下面单独讲讲。</p>\n<h3 id=\"3-FILEBASENAME-h\"><a href=\"#3-FILEBASENAME-h\" class=\"headerlink\" title=\"3.FILEBASENAME.h\"></a>3.<strong><em>FILEBASENAME</em></strong>.h</h3><p>内容为</p>\n<p>  <strong><em>FILENAME</em></strong><br>  <strong><em>PROJECTNAME</em></strong></p>\n<p>  Created by <strong><em>FULLUSERNAME</em></strong> on <strong><em>DATE</em></strong>.<br><strong><em>COPYRIGHT</em></strong></p>\n<p>#import “<strong>_VARIABLE<em>cocoaTouchSubclass</em></strong>.h”</p>\n<p>@interface <strong><em>FILEBASENAMEASIDENTIFIER</em></strong> : <strong>_VARIABLE<em>cocoaTouchSubclass</em></strong></p>\n<p>@end<br>里面的参数在生成h文件时，系统会替换了输入的文件名。具体都是什么含义，大家可以自行Google了。</p>\n<h3 id=\"4-FILEBASENAME-m\"><a href=\"#4-FILEBASENAME-m\" class=\"headerlink\" title=\"4. FILEBASENAME.m\"></a>4. <strong><em>FILEBASENAME</em></strong>.m</h3><p>内容为</p>\n<p>  <strong><em>FILENAME</em></strong><br>  <strong><em>PROJECTNAME</em></strong></p>\n<p>  Created by <strong><em>FULLUSERNAME</em></strong> on <strong><em>DATE</em></strong>.<br><strong><em>COPYRIGHT</em></strong></p>\n<p>#import “<strong><em>FILEBASENAME</em></strong>.h”<br> Controllers<br> Model<br> Views</p>\n<p>#define &lt;#macro#&gt; &lt;#value#&gt;</p>\n<p>@interface <strong><em>FILEBASENAMEASIDENTIFIER</em></strong> ()</p>\n<p>@property (nonatomic, strong) &lt;#type#&gt; *&lt;#name#&gt;<br>@end<br>@implementation <strong><em>FILEBASENAMEASIDENTIFIER</em></strong></p>\n<p>#pragma mark - View Controller LifeCyle</p>\n<ul>\n<li>[ ] (instancetype)initWithCoder:(NSCoder *)coder<br>{<br>  self = [super initWithCoder:coder];<br>  if (self) {<br>  }<br>  return self;<br>}   </li>\n<li><p>[ ] (void)viewDidLoad<br>{<br>  [super viewDidLoad];</p>\n<p>  [self initialNavigationBar];<br>}</p>\n</li>\n<li>[ ] (void)viewDidAppear:(BOOL)animated<br>{<br>  [super viewDidAppear:animated];<br>}</li>\n<li><p>[ ] (void)viewWillDisappear:(BOOL)animated<br>{<br>  [super viewWillDisappear:animated];<br>}</p>\n</li>\n<li><p>[ ] (void)didReceiveMemoryWarning<br>{<br>  [super didReceiveMemoryWarning];</p>\n<p>  [[SDImageCache sharedImageCache] setValue:nil forKey:@”memCache”];<br>}</p>\n</li>\n<li><p>[ ] (void)dealloc<br>{<br>  [[NSNotificationCenter defaultCenter] removeObserver:self];<br>}<br>#pragma mark - Override</p>\n</li>\n</ul>\n<p>#pragma mark - Initial Methods</p>\n<ul>\n<li>[ ] (void)initialNavigationBar<br>{<br>  self.navigationItem.title = &lt;#title#&gt;;<br>}</li>\n</ul>\n<p>#pragma mark - Target Methods</p>\n<p>#pragma mark - Notification Methods</p>\n<p>#pragma mark - KVO Methods</p>\n<p>#pragma mark - UITableViewDelegate, UITableViewDataSource</p>\n<p>#pragma mark - Privater Methods</p>\n<p>#pragma mark - Setter Getter Methods</p>\n<p>@end<br>按编程规范编写的，大家可以自行修改，New File后将自动生成你修改的内容。</p>\n<h3 id=\"5-TemplateInfo-plist\"><a href=\"#5-TemplateInfo-plist\" class=\"headerlink\" title=\"5. TemplateInfo.plist\"></a>5. TemplateInfo.plist</h3><p><img src=\"_images/Xcode 创建自定义模板 (来源网络\" alt=\"\">/1693553-0ed0fdac87c08112.png)<br>SortOrder 这个是排序的值，可以设置在界面中的摆放位置<br>Options中的Item0，Item1，Item2，Item3 对应了<br><img src=\"_images/Xcode 创建自定义模板 (来源网络\" alt=\"\">/1693553-d8e6c07058f379f0-1.png)<br>自定义的BaseViewController的类，当然可以使用系统或自己定义。<br>BaseViewController的后缀。选择后，自动在Class后面添加ViewController的后缀。<br>是否生成Xib文件，默认是ture。当选择了BaseViewController时，可以进行checkout，不然不可选，不生成Xib文件。</p>\n"},{"title":"使用SourceTree&Github 碰到的问题","date":"2017-03-02T06:40:15.000Z","_content":"### 使用github 创建一个空白仓库时，使用sourcetree克隆下来的分支里面找不到master分支，错误提示：fatal: Not a valid object name: 'master'\n*解决方案 :*\n\t1. `git init`  初始化这个仓库\n\t2. `git --bare init`  清空这个仓库\n这时打开SourceTree，**未暂存文件**里面会出来多个文件，提交这些文件后，master 就正常显示了。\n**注：不知道是不是只有我碰到这类问题**\n","source":"_posts/使用SourceTree&Github 碰到的问题.md","raw":"---\ntitle: 使用SourceTree&Github 碰到的问题\ndate: 2017-03-02 14:40:15\ntags:\n---\n### 使用github 创建一个空白仓库时，使用sourcetree克隆下来的分支里面找不到master分支，错误提示：fatal: Not a valid object name: 'master'\n*解决方案 :*\n\t1. `git init`  初始化这个仓库\n\t2. `git --bare init`  清空这个仓库\n这时打开SourceTree，**未暂存文件**里面会出来多个文件，提交这些文件后，master 就正常显示了。\n**注：不知道是不是只有我碰到这类问题**\n","slug":"使用SourceTree&Github 碰到的问题","published":1,"updated":"2017-03-02T09:44:30.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0dau52i00039z4tcqltlb8h","content":"<h3 id=\"使用github-创建一个空白仓库时，使用sourcetree克隆下来的分支里面找不到master分支，错误提示：fatal-Not-a-valid-object-name-‘master’\"><a href=\"#使用github-创建一个空白仓库时，使用sourcetree克隆下来的分支里面找不到master分支，错误提示：fatal-Not-a-valid-object-name-‘master’\" class=\"headerlink\" title=\"使用github 创建一个空白仓库时，使用sourcetree克隆下来的分支里面找不到master分支，错误提示：fatal: Not a valid object name: ‘master’\"></a>使用github 创建一个空白仓库时，使用sourcetree克隆下来的分支里面找不到master分支，错误提示：fatal: Not a valid object name: ‘master’</h3><p><em>解决方案 :</em></p>\n<pre><code>1. `git init`  初始化这个仓库\n2. `git --bare init`  清空这个仓库\n</code></pre><p>这时打开SourceTree，<strong>未暂存文件</strong>里面会出来多个文件，提交这些文件后，master 就正常显示了。<br><strong>注：不知道是不是只有我碰到这类问题</strong></p>\n","excerpt":"","more":"<h3 id=\"使用github-创建一个空白仓库时，使用sourcetree克隆下来的分支里面找不到master分支，错误提示：fatal-Not-a-valid-object-name-‘master’\"><a href=\"#使用github-创建一个空白仓库时，使用sourcetree克隆下来的分支里面找不到master分支，错误提示：fatal-Not-a-valid-object-name-‘master’\" class=\"headerlink\" title=\"使用github 创建一个空白仓库时，使用sourcetree克隆下来的分支里面找不到master分支，错误提示：fatal: Not a valid object name: ‘master’\"></a>使用github 创建一个空白仓库时，使用sourcetree克隆下来的分支里面找不到master分支，错误提示：fatal: Not a valid object name: ‘master’</h3><p><em>解决方案 :</em></p>\n<pre><code>1. `git init`  初始化这个仓库\n2. `git --bare init`  清空这个仓库\n</code></pre><p>这时打开SourceTree，<strong>未暂存文件</strong>里面会出来多个文件，提交这些文件后，master 就正常显示了。<br><strong>注：不知道是不是只有我碰到这类问题</strong></p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[],"Tag":[]}}